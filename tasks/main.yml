---

- name: Disable port ldap 389
  ansible.posix.firewalld:
    zone: public
    service: ldap
    permanent: true
    immediate: true
    state: disabled
  tags: firewalld

- name: Open port ldaps 636
  ansible.posix.firewalld:
    zone: public
    service: "{{ item }}"
    permanent: true
    immediate: true
    state: enabled
  loop:
    - ldaps
    # - ssh
    # - dns
  tags: firewalld

- name: Block from external network
  ansible.posix.firewalld:
    rich_rule: rule family="ipv4" source NOT address="{{
      ansible_default_ipv4.network + '/' + ansible_default_ipv4.prefix | string }}" port port="636" protocol="tcp" reject
    zone: public
    permanent: true
    immediate: true
    state: enabled

- name: Set ldap internal IP in /etc/hosts
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ ldap_host_ip_internal | d('') + ' ' + ldap_host }}"
    regexp: ".* {{ ldap_host }}"
    state: "{{ (ldap_host_ip_internal | d('') is truthy) | ternary('present', 'absent') }}"

# the next task will return:
# - _container_storage_dir_base_local
# - _container_storage_dir_base
# - _group, _owner
# - _systemd_scope
# - _systemd_service_files_dir
# - _xdg_runtime_dir
- name: Include podman_init_vars.yml from sleif.podman
  ansible.builtin.include_tasks: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: sleif.podman/tasks/includes/podman_init_vars.yml
      paths: "{{ lookup('config', 'DEFAULT_ROLES_PATH') }}"
  tags: always

- name: Create persistant openldap data directories
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    mode: '{{ item.mode }}'
  loop:
    - {path: '{{ _container_storage_dir_base }}/{{ container_name }}/certs', mode: '0700'}
    - {path: '{{ _container_storage_dir_base_local }}/{{ container_name }}/data', mode: '0770'}

- name: Initial fill certificate directory
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.shell: |
    podman unshare diff -q {{ certificate_src }}/{{
    ldap_host }}/{{ ldap_host }}.crt {{ _container_storage_dir_base }}/{{ container_name }}/certs/{{ ldap_host }}.crt || (
    podman unshare cp -aTLv --remove-destination {{ certificate_src }}/{{ ldap_host }} {{ _container_storage_dir_base }}/{{ container_name }}/certs;
    podman unshare chown -Rh {{ podman_user }}:{{ podman_group }} {{ _container_storage_dir_base }}/{{ container_name }}/certs)
  register: _result
  changed_when: _result.rc != 0
  until:
    - _result.rc == 0
  retries: 10
  delay: 10
  tags: ldapcron

- name: Include role sleif.podman podman_operation podman_pod_create
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_pod_create
  vars:
    podman_operation: podman_pod_create
  tags: always

- name: Pull container image bitnami/openldap
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_image:
    name: "docker.io/bitnami/openldap"
    tag: "{{ openldap_container_version }}"
    force: true

- name: Create Podman secrets
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_secret:
    state: present
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    skip_existing: true
  loop:
    - {name: 'ldap_admin_password', data: '{{ ldap_admin_password }}'}
    - {name: 'ldap_config_password', data: '{{ ldap_config_password }}'}
  tags: podman_secrets

- name: Create Container bitnami/openldap
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  containers.podman.podman_container:
    name: "{{ container_name }}"
    image: "docker.io/bitnami/openldap:{{ openldap_container_version }}"
    state: created
    restart_policy: always
    recreate: "{{ podman_container_recreate | d(false) }}"
    # restart: true
    published_ports:
      - '636:636'
    stop_timeout: 90
    network: "slirp4netns:port_handler=slirp4netns"
    # network: "{{ podman_network_name }}"
    volumes:
      - '{{ _container_storage_dir_base }}/{{ container_name }}/certs:/opt/bitnami/openldap/certs:Z'
      - '{{ _container_storage_dir_base_local }}/{{ container_name }}/data:/bitnami/openldap:Z'
    # security_opts: label:type:docker_t
    secrets:
      - ldap_admin_password
      - ldap_config_password
    env:
      # https://www.openldap.org/doc/admin24/runningslapd.html
      # https://www.openldap.org/doc/admin24/slapdconf2.html
      # consider olcLogLevel -1 setting in ldap/config/cn=config.ldif
      BITNAMI_DEBUG: "yes"
      # LDAP_LOGLEVEL: "-1"
      # CONTAINER_LOG_LEVEL: "1024"
      LDAP_PORT_NUMBER: "389"
      LDAP_LDAPS_PORT_NUMBER: "636"
      LDAP_ROOT: "{{ ldap_base_dn }}"
      LDAP_ADMIN_USER: "admin"
      LDAP_ADMIN_PASSWORD_FILE: "/run/secrets/ldap_admin_password"
      # LDAP_ADMIN_PASSWORD: "{{ ldap_admin_password }}"
      LDAP_CONFIG_ADMIN_ENABLED: "yes"
      LDAP_CONFIG_ADMIN_USER: "admin"
      LDAP_CONFIG_ADMIN_PASSWORD_FILE: "/run/secrets/ldap_config_password"
      # LDAP_CONFIG_ADMIN_PASSWORD: "{{ ldap_config_password }}"
      LDAP_USER_DC: "{{ ldap_user_dc | d('users') }}"
      # LDAP_USERS: "{{ ldap_readonly_user_username }}"
      # LDAP_PASSWORDS: "{{ ldap_readonly_user_password }}"
      LDAP_PASSWORDS: ""
      LDAP_SKIP_DEFAULT_TREE: "yes"
      LDAP_ENABLE_TLS: "yes"
      # LDAP_REQUIRE_TLS: "yes"
      LDAP_TLS_CERT_FILE: "/opt/bitnami/openldap/certs/{{ ldap_host }}.crt"
      LDAP_TLS_KEY_FILE: "/opt/bitnami/openldap/certs/{{ ldap_host }}.key"
      LDAP_TLS_CA_FILE: "/opt/bitnami/openldap/certs/{{ ldap_host }}.crt"
      # LDAP_TLS_DH_PARAMS_FILE:
      LDAP_TLS_VERIFY_CLIENTS: "never"
      LDAP_ALLOW_ANON_BINDING: "no"
      LDAP_CONFIGURE_PPOLICY: "yes"
      LDAP_PPOLICY_HASH_CLEARTEXT: "yes"
      TZ: "Europe/Berlin"
    timezone: "Europe/Berlin"
  tags: ldap_container

- name: Include role sleif.podman podman_operation podman_generate_systemd
  ansible.builtin.include_role:
    name: sleif.podman
    apply:
      tags:
        - podman_generate_systemd
  vars:
    podman_operation: podman_generate_systemd
    target: "{{ pod_name if pod_name | d('') is truthy else container_name }}"
  tags: always

- name: Enable cronjob to provide letsencrypt certificates for ldap
  ansible.builtin.cron:
    name: "provide ldap certs"
    cron_file: openldap_certificate_update
    user: "{{ podman_user }}"
    job: "podman unshare diff -q {{ certificate_src }}/{{
          ldap_host }}/{{ ldap_host }}.crt {{ _container_storage_dir_base }}/{{ container_name }}/certs/{{ ldap_host }}.crt || (
          podman unshare cp -aTLv --remove-destination {{ certificate_src }}/{{ ldap_host }} {{ _container_storage_dir_base }}/{{ container_name }}/certs;
          podman unshare chown -Rh {{ podman_user }}:{{ podman_group }} {{ _container_storage_dir_base }}/{{ container_name }}/certs;
          podman restart {{ container_name }} > /dev/null )"
    # job: "diff -q {{ _container_storage_dir_base }}/caddy/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/{{
    #        ldap_host }}/{{ ldap_host }}.crt
    #        {{ _container_storage_dir_base }}/{{ container_name }}/certs/{{ ldap_host }}.crt || ( cp -aTL --remove-destination
    #        {{ _container_storage_dir_base }}/caddy/data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/{{
    #        ldap_host }} {{ _container_storage_dir_base }}/{{ container_name }}/certs > /dev/null;
    #        curl -o {{ _container_storage_dir_base }}/{{ container_name }}/certs/chain2.pem https://letsencrypt.org/certs/lets-encrypt-r3.pem;
    #        cat {{ _container_storage_dir_base }}/{{ container_name }}/certs/{{ ldap_host }}.crt >> {{
    #        _container_storage_dir_base }}/{{ container_name }}/certs/chain2.pem;
    #        podman restart {{ container_name }} )"
  tags: ldapcron

- name: Ensure cron mail go to root
  ansible.builtin.cron:
    cron_file: openldap_certificate_update
    user: "{{ podman_user }}"
    env: true
    name: "MAILTO"
    job: "root"
  tags: ldapcron

- name: Install openldap-clients
  ansible.builtin.package:
    name: openldap-clients
  tags: skipttag

- name: Add variable to ignore certificate chain
  ansible.builtin.lineinfile:
    dest: /etc/openldap/ldap.conf
    line: "TLS_REQCERT never"

- name: Install python-ldap
  ansible.builtin.package:
    name: python-ldap
  tags: skipttag

- name: Wait for ldap service
  ansible.builtin.wait_for:
    port: 636
    timeout: 60

- name: Enable memberof module
  community.general.ldap_attrs:
    dn: cn=module{0},cn=config
    attributes:
      olcModuleLoad:
        - "memberof.so"
    server_uri: "{{ ldap_auth_config.server_uri }}"
    bind_dn: "{{ ldap_auth_config.bind_dn }}"
    bind_pw: "{{ ldap_auth_config.bind_pw }}"
  register: result
  until:
    - not ( (result.failed | bool ) and ('Type or value exists' not in result.details) ) or not (result.failed | bool )
  retries: 100
  delay: 10
  failed_when: >
    (result.failed | bool ) and
    ("'desc': 'Type or value exists'" not in result.details)
  tags:
    - ldap_config_memberof

- name: Enable memberof olcOverlay
  community.general.ldap_entry:
    dn: olcOverlay=memberof,olcDatabase={2}mdb,cn=config
    objectClass:
      - olcOverlayConfig
      - olcMemberOf
    attributes:
      olcOverlay: "memberof"
      olcMemberOfGroupOC: "groupOfUniqueNames"
      olcMemberOfMemberAD: "uniqueMember"
      olcMemberOfMemberOfAD: "memberOf"
      olcMemberOfRefint: "TRUE"
      olcMemberOfDangling: "ignore"
    server_uri: "{{ ldap_auth_config.server_uri }}"
    bind_dn: "{{ ldap_auth_config.bind_dn }}"
    bind_pw: "{{ ldap_auth_config.bind_pw }}"
  tags:
    - ldap_config_memberof

- name: Bootstrap LDAP content
  when: ldap_initial_local_data_file | d('') is truthy
  block:
    - name: Slurp the backup file
      ansible.builtin.slurp:
        src: "{{ ldap_initial_local_data_file }}"
      register: _ldap_initial_local_data
      delegate_to: localhost

    - name: podman block
      become: "{{ podman_rootless | bool }}"
      become_user: "{{ podman_user if podman_rootless | bool else omit }}"
      block:
        - name: Prepare ldifs directory
          ansible.builtin.file:
            path: /var/tmp/ldifs
            state: directory
            mode: '0700'

        - name: Place the LDAP data file
          ansible.builtin.copy:
            dest: /var/tmp/ldifs/backup.ldif.gz
            content: "{{ _ldap_initial_local_data['content'] | b64decode }}"
            mode: '0700'

        - name: Place the initial data inside the container
          ansible.builtin.shell: |
            cd /var/tmp/ldifs
            gunzip -f /var/tmp/ldifs/backup.ldif.gz
            podman cp /var/tmp/ldifs {{ container_name }}:/ldifs_manually
            podman exec {{ container_name }} ldapadd -f /ldifs_manually/backup.ldif -H 'ldapi:///' -D "cn=admin,{{
            ldap_base_dn }} " -w {{ ldap_admin_password }} -c
            rm -rf /var/tmp/ldifs
          changed_when: true
          no_log: true

- name: Ldap create dcObject
  community.general.ldap_entry:
    dn: "{{ ldap_base_dn }}"
    objectClass:
      - dcObject
      - organization
    attributes:
      o: "{{ ldap_organisation }}"
      dc: "{{ ldap_base_dn.split(',')[0] | regex_replace('^.{3}', '') }}"
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  tags:
    - ldap_ou

# - name: Ldap create LDAP read only user
#   community.general.ldap_entry:
#     dn: "{{ 'cn=' + ldap_readonly_user_username + ',' + ldap_base_dn }}"
#     state: absent
#     server_uri: "{{ ldap_auth_admin.server_uri }}"
#     bind_dn: "{{ ldap_auth_admin.bind_dn }}"
#     bind_pw: "{{ ldap_auth_admin.bind_pw }}"
#   tags:
#     - ldap_ou

- name: Ldap create LDAP read only user
  community.general.ldap_entry:
    dn: "{{ 'cn=' + ldap_readonly_user_username + ',' + ldap_base_dn }}"
    objectClass:
      - simpleSecurityObject
      - organizationalRole
    attributes:
      description: "LDAP read only user"
      # cn: "{{ ldap_readonly_user_username }}"
      userPassword: "{{ ldap_readonly_user_password }}"
      # userPassword: "{{ '{SSHA}' + ldap_readonly_user_password }}"
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  tags:
    - ldap_ou

- name: Set up olcAccess rules
  community.general.ldap_attrs:
    dn: olcDatabase={2}mdb,cn=config
    attributes:
      olcAccess:
        - >-
          to attrs=userPassword,shadowLastChange
          by self write
          by dn="{{ ldap_auth_admin.bind_dn }}" write
          by anonymous auth
          by * none
        - >-
          to *
          by self read
          by dn="{{ ldap_auth_admin.bind_dn }}" write
          by dn="{{ ldap_bind_dn }}" read
          by * none
    ordered: true
    state: exact
    server_uri: "{{ ldap_auth_config.server_uri }}"
    bind_dn: "{{ ldap_auth_config.bind_dn }}"
    bind_pw: "{{ ldap_auth_config.bind_pw }}"
  tags:
    - ldap_config_access

- name: Ldap create domain ou ou={{ site_domain_ou }}
  community.general.ldap_entry:
    dn: ou={{ site_domain_ou }},{{ ldap_base_dn }}
    objectClass: organizationalUnit
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  tags:
    - ldap_ou

- name: Ldap create group of unique names ou ou={{ ldap_ou_goun }}
  community.general.ldap_entry:
    dn: ou={{ ldap_ou_goun }},{{ ldap_base_dn }}
    objectClass: organizationalUnit
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  tags:
    - ldap_goun

- name: Ldap create users und groups ou in ou={{ site_domain_ou }}
  community.general.ldap_entry:
    dn: ou={{ item }},ou={{ site_domain_ou }},{{ ldap_base_dn }}
    objectClass: organizationalUnit
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  with_items:
    - "{{ ldap_ou_users }}"
    - "{{ ldap_ou_groups }}"
  tags:
    - ldap_ou

- name: Create groups
  community.general.ldap_entry:
    dn: cn={{ item.key }},ou={{ ldap_ou_groups }},ou={{ site_domain_ou }},{{ ldap_base_dn }}
    objectClass: posixGroup
    attributes:
      gidNumber: "{{ item.value.gid }}"
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  with_dict: "{{ site_posix_groups }}"
  tags:
    - ldap_groups

# - name: Calculate user password hashes
#  ansible.builtin.shell: "echo -n '{{ item.value.password }}' | openssl dgst -sha256 -binary | openssl enc -base64"
#  register: hashes
#  with_dict: "{{ site_posix_users }}"
#  #when: emailusers is defined
#  #no_log: true
#  tags:
#    - configuration
#
# - name: Create the users
#  community.general.ldap_entry:
#    dn: cn={{item.0.key}},ou={{ ldap_ou_users }},{{ ldap_base_dn }}
#    objectClass:
#      - inetOrgPerson
#      - posixAccount
#      - top
#    attributes:
#      gidNumber: "{{item.0.value.uid}}"
#      givenName: "{{item.0.value.givenname}}"
#      homeDirectory: "/home/{{item.0.key}}"
#      loginShell: /bin/bash
#      mail: "{{item.0.value.mail}}"
#      #userPassword: "{SHA512-CRYPT}{{item.value.password}}"
#      #userPassword: "{sha512}{{item.value.password | password_hash('sha512')}}"
#      userPassword: "{sha512}{{ item.1.stdout }}"
#      sn: "{sha512}{{item.0.value.password}}"
##      sn: "{{item.value.sn}}"
#      uidNumber: "{{item.0.value.uid}}"
#      uid: "{{item.0.key}}"
#    server_uri: "{{ ldap_auth_admin.server_uri }}"
#    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
#    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
#  with_together:
#     - "{{ site_posix_users }}"
#     - "{{ hashes }}"
#  tags: skipttag

- name: Create the users
  community.general.ldap_entry:
    dn: cn={{ item.key }},ou={{ ldap_ou_users }},ou={{ site_domain_ou }},{{ ldap_base_dn }}
    objectClass:
      - inetOrgPerson
      - posixAccount
      - top
    attributes:
      displayName: "{{ item.value.displayName }}"
      gidNumber: "{{ item.value.gid }}"
      givenName: "{{ item.value.givenname }}"
      homeDirectory: "/home/{{ item.key }}"
      loginShell: /bin/bash
      mail: "{{ item.value.mail }}"
      # userPassword: "{SHA512-CRYPT}{{item.value.password}}"
      # userPassword: "{sha512}{{item.value.password | password_hash('sha512')}}"
      # userPassword: "{sha512}{{ item.value.password }}"
      userPassword: "{{ item.value.password }}"
      sn: "{{ item.value.sn }}"
      uidNumber: "{{ item.value.uid }}"
      uid: "{{ item.key }}"
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  with_dict: "{{ site_posix_users }}"
  tags:
    - ldap_user

- name: Update members of  posix groups
  community.general.ldap_attrs:
    dn: cn={{ item.1 }},ou={{ ldap_ou_groups }},ou={{ site_domain_ou }},{{ ldap_base_dn }}
    attributes:
      memberUid:
        - "{{ item.0.name }}"
    server_uri: "{{ ldap_auth_admin.server_uri }}"
    bind_dn: "{{ ldap_auth_admin.bind_dn }}"
    bind_pw: "{{ ldap_auth_admin.bind_pw }}"
  with_subelements:
    - "{{ site_posix_users }}"
    - groups
  tags:
    - ldap_member

- name: Include tasks from add_group_of_unique_names.yml
  ansible.builtin.include_tasks:
    file: add_group_of_unique_names.yml
  loop: "{{ site_gouns }}"
  loop_control:
    loop_var: _goun
  when:
    - site_gouns | length > 0

- name: Create backup directory for {{ container_name }}
  ansible.builtin.file:
    path: "{{ _container_storage_dir_base }}/{{ container_name }}_backups"
    state: directory
    owner: "{{ _owner }}"
    group: "{{ _group }}"
    mode: '0700'
  register: _backup_dir_create
  tags:
    - openldap_backup

- name: Ensure gzip is installed
  ansible.builtin.package:
    name: gzip
    state: present
  tags:
    - openldap_backup

# openldap config restore: slapadd -c -F /etc/ldap/slapd.d -n 0 openldap.config
# openldap data restore: slapadd -c -F /etc/ldap/slapd.d -n 2 openldap.data
- name: Add cronjob for daily openldap config backup
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.cron:
    name: "Daily openldap config backup"
    minute: "21"
    hour: "*/4"
    job: "podman exec {{ container_name }} sh -c '/opt/bitnami/openldap/sbin/slapcat -F /bitnami/openldap/slapd.d -n 0' >
      {{ _container_storage_dir_base }}/{{ container_name }}_backups/{{ container_name }}.config;
      gzip -f {{ _container_storage_dir_base }}/{{ container_name }}_backups/{{ container_name }}.config"
  tags:
    - openldap_backup

- name: Add cronjob for daily openldap data backup
  become: "{{ podman_rootless | bool }}"
  become_user: "{{ podman_user if podman_rootless | bool else omit }}"
  ansible.builtin.cron:
    name: "Daily openldap data backup"
    minute: "22"
    hour: "*/4"
    job: "podman exec {{ container_name }} sh -c '/opt/bitnami/openldap/sbin/slapcat -F /bitnami/openldap/slapd.d -n 2' >
      {{ _container_storage_dir_base }}/{{ container_name }}_backups/{{ container_name }}.data;
      gzip -f {{ _container_storage_dir_base }}/{{ container_name }}_backups/{{ container_name }}.data"
  tags:
    - openldap_backup

- name: Configure logrotate for the database dump
  ansible.builtin.template:
    src: logrotate.cfg.j2
    dest: "/etc/logrotate.d/{{ container_name }}.cfg"
    mode: '0644'
  tags:
    - openldap_backup

- name: Selinux enable logrotate on NFS
  ansible.posix.seboolean:
    name: logrotate_use_nfs
    state: true
    persistent: true
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - openldap_backup_selinux

- name: Set selinux policy for backup rotation
  community.general.sefcontext:
    target: '{{ item.target }}'
    setype: "{{ item.setype }}"
    reload: true
    state: "{{ item.state }}"
  register: filecontext
  with_items:
    - {target: '{{ _container_storage_dir_base }}/{{ container_name }}_backups(/.*)?', setype: 'var_log_t', state: 'present'}
  when:
    - ansible_selinux and ansible_selinux.status == "enabled"
  tags:
    - openldap_backup_selinux

- name: Run restore context to reload selinux
  ansible.builtin.command: |
    restorecon -F -R -v {{ item.target }}
  with_items:
    - {index: 0, target: '{{ _container_storage_dir_base }}/{{ container_name }}_backups'}
  when:
    - filecontext.results[item.index] is changed or _backup_dir_create.changed | bool
    - ansible_selinux and ansible_selinux.status == "enabled"
  register: _result
  changed_when: _result.rc != 0
  tags:
    - openldap_backup_selinux
